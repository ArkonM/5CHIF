// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Data;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace DataModel
{
	public partial class DatabaseDb : DataConnection
	{
		public DatabaseDb()
		{
			InitDataContext();
		}

		public DatabaseDb(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

        public DatabaseDb(string version, string configuration)
            : base(version, configuration)
        {
            InitDataContext();
        }

        public DatabaseDb(DataOptions<DatabaseDb> options)
			: base(options.Options)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<Kategorie>  Kategories  => this.GetTable<Kategorie>();
		public ITable<Picture>    Pictures    => this.GetTable<Picture>();
		public ITable<Restaurant> Restaurants => this.GetTable<Restaurant>();
	}

	public static partial class ExtensionMethods
	{
		#region Table Extensions
		public static Kategorie? Find(this ITable<Kategorie> table, long katId)
		{
			return table.FirstOrDefault(e => e.KatId == katId);
		}

		public static Task<Kategorie?> FindAsync(this ITable<Kategorie> table, long katId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.KatId == katId, cancellationToken);
		}

		public static Picture? Find(this ITable<Picture> table, long imageId)
		{
			return table.FirstOrDefault(e => e.ImageId == imageId);
		}

		public static Task<Picture?> FindAsync(this ITable<Picture> table, long imageId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.ImageId == imageId, cancellationToken);
		}

		public static Restaurant? Find(this ITable<Restaurant> table, long restId)
		{
			return table.FirstOrDefault(e => e.RestId == restId);
		}

		public static Task<Restaurant?> FindAsync(this ITable<Restaurant> table, long restId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.RestId == restId, cancellationToken);
		}
		#endregion
	}
}
